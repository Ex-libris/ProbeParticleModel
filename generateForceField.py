#!/usr/bin/python
import sys
import numpy as np


import pyProbeParticle                as PPU     
from   pyProbeParticle            import basUtils
from   pyProbeParticle            import elements   
import pyProbeParticle.GridUtils      as GU
#import pyProbeParticle.core          as PPC
import pyProbeParticle.HighLevel      as PPH
import pyProbeParticle.fieldFFT       as fFFT



from optparse import OptionParser

parser = OptionParser()
parser.add_option( "-i", "--input", action="store", type="string", help="format of input file", default='vasp.locpot.xsf')
(options, args) = parser.parse_args()

num = len(sys.argv)
if (num < 2):
    sys.exit("Number of arguments = "+str(num-1)+". This script shoudl have at least one argument. I am terminating...")
finput = sys.argv[num-1]



print " >> OVEWRITING SETTINGS by params.ini  "
PPU.loadParams( 'params.ini' )





print " ========= get electrostatic forcefiled from hartree "

# TODO with time implement reading a hartree potential generated by different software
print " loading Hartree potential from disk "
if(options.input == 'vasp.locpot.xsf'):
    V, lvec, nDim, head = GU.loadXSF(finput)
elif(options.input == 'aims.cube'):
    V, lvec, nDim, head = GU.loadCUBE(finput)

print " computing convolution with tip by FFT "
Fel_x,Fel_y,Fel_z = fFFT.potential2forces( V, lvec, nDim, sigma = 1.0 )

print " saving electrostatic forcefiled "
GU.saveXSF('FFel_x.xsf', Fel_x, lvec, head)
GU.saveXSF('FFel_y.xsf', Fel_y, lvec, head)
GU.saveXSF('FFel_z.xsf', Fel_z, lvec, head)

del Fel_x,Fel_y,Fel_z,V




print " ========= get lenard jones potential "

PPU.params['gridA'] = lvec[ 1,:  ].copy()
PPU.params['gridB'] = lvec[ 2,:  ].copy()
PPU.params['gridC'] = lvec[ 3,:  ].copy()
PPU.params['gridN'] = nDim.copy()

print "--- Compute Lennard-Jones Force-filed ---"
atoms     = basUtils.loadAtoms('input.xyz', elements.ELEMENT_DICT )
iZs,Rs,Qs = PPH.parseAtoms( atoms, autogeom = False, PBC = True )
FFLJ      = PPH.computeLJ( Rs, iZs, FFLJ=None, FFparams=None)

GU.limit_vec_field( FFLJ, Fmax=100.0 ) # remove too large valuesl; keeps the same direction; good for visualization 

print "--- Save  ---"
GU.saveVecFieldXsf( 'FFLJ', FFLJ, lvec, head)

